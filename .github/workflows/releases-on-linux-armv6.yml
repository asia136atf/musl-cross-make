name: releases-on-linux-armv6

on:
  push:
    tags:
      - "v*"

jobs:
  init:
    name: Init
    runs-on: ubuntu-latest
    outputs:
      TARGETS: ${{ steps.get_all_targets.outputs.TARGETS }}
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4

      - name: Get all targets
        id: get_all_targets
        run: |
          declare -a arr=()
          while IFS= read -r line; do
          if [ -z "$line" ] || [ "${line:0:1}" == "#" ]; then
            continue
          fi
          arr+=("$line")
          done < scripts/triples.txt
          printf -v json '"%s",' "${arr[@]}"
          json="[${json%,}]"
          echo "TARGETS=$json" >> $GITHUB_OUTPUT

      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_OUTPUT

  build_targets_on_linux_armv6_cross:
    name: Build cross
    runs-on: ubuntu-latest
    needs:
      - init
    strategy:
      matrix:
        targets: ${{ fromJSON(needs.init.outputs.TARGETS) }}
    steps:
      - uses: actions/checkout@v4

      - uses: uraimo/run-on-arch-action@v2
        name: Build
        id: build
        with:
          arch: armv6
          distro: alpine_latest
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${PWD}:/build"
          shell: /bin/sh
          install: |
            apk add --no-cache \
              coreutils \
              curl \
              bzip2 \
              xz \
              make \
              bison \
              rsync \
              patch
          run: |
            cd /build
            unamespacer=$(uname -s | tr '[:upper:]' '[:lower:]')-$(uname -m)
            echo ::set-output name=unamespacer::${unamespacer}
            NATIVE_COMPILER="https://github.com/${{ github.repository }}/releases/latest/download/${{ matrix.targets }}-native-${unamespacer}.tgz"
            NATIVE_COMPILER_STATUS=$(curl -sILo /dev/null -w "%{http_code}\n" $NATIVE_COMPILER)
            if [ $NATIVE_COMPILER_STATUS -ne 200 ]; then apk add --no-cache g++; else mkdir -p "${{ matrix.targets }}-native" && curl -sL "$NATIVE_COMPILER" | tar -zxf - -C "${{ matrix.targets }}-native" --strip-components 1 && chmod -R 0755 ${{ matrix.targets }}-native && export PATH="$PWD/${{ matrix.targets }}-native/bin:$PATH"; fi
            sh scripts/build.sh \
                -L \
                -T "${{ matrix.targets }}"

      - name: Upload ${{ matrix.targets }} cross
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.targets }}-cross
          path: dist/${{ matrix.targets }}-cross

      - name: Archive
        run: |
          mkdir -p archive
          tar -zcvf archive/${{ matrix.targets }}-cross-${{ steps.build.outputs.unamespacer }}.tgz \
            -C dist/${{ matrix.targets }}-cross \
            .

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.init.outputs.VERSION }}
          draft: false
          prerelease: false
          append_body: false
          fail_on_unmatched_files: true
          files: |
            archive/*.tgz

  build_targets_on_linux_armv6_native:
    name: Build native
    runs-on: ubuntu-latest
    needs:
      - init
      - build_targets_on_linux_armv6_cross
    strategy:
      matrix:
        targets: ${{ fromJSON(needs.init.outputs.TARGETS) }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.targets }}-cross
          path: dist/${{ matrix.targets }}-cross

      - uses: uraimo/run-on-arch-action@v2
        name: Build
        id: build
        with:
          arch: armv6
          distro: alpine_latest
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${PWD}:/build"
          shell: /bin/sh
          install: |
            apk add --no-cache \
              coreutils \
              curl \
              bzip2 \
              xz \
              make \
              bison \
              rsync \
              patch
          run: |
            cd /build
            unamespacer=$(uname -s | tr '[:upper:]' '[:lower:]')-$(uname -m)
            echo ::set-output name=unamespacer::${unamespacer}
            NATIVE_COMPILER="https://github.com/${{ github.repository }}/releases/latest/download/${{ matrix.targets }}-native-${unamespacer}.tgz"
            NATIVE_COMPILER_STATUS=$(curl -sILo /dev/null -w "%{http_code}\n" $NATIVE_COMPILER)
            if [ $NATIVE_COMPILER_STATUS -ne 200 ]; then apk add --no-cache g++; else mkdir -p "${{ matrix.targets }}-native" && curl -sL "$NATIVE_COMPILER" | tar -zxf - -C "${{ matrix.targets }}-native" --strip-components 1 && chmod -R 0755 ${{ matrix.targets }}-native && export PATH="$PWD/${{ matrix.targets }}-native/bin:$PATH"; fi
            chmod -R 0755 dist/${{ matrix.targets }}-cross
            sh scripts/build.sh \
                -NL \
                -T "${{ matrix.targets }}"

      - name: Archive
        run: |
          mkdir -p archive
          tar -zcvf archive/${{ matrix.targets }}-native-${{ steps.build.outputs.unamespacer }}.tgz \
            -C dist/${{ matrix.targets }}-native \
            .

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.init.outputs.VERSION }}
          draft: false
          prerelease: false
          append_body: false
          fail_on_unmatched_files: true
          files: |
            archive/*.tgz